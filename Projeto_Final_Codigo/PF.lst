CCS PCM C Compiler, Version 5.076, 56587               21-jun-24 15:12

               Filename:   D:\projetos_pic\Jogo_Da_Velha_Com_PIC16F877A\Projeto_Final_Codigo\PF.lst

               ROM used:   142 words (2%)
                           Largest free fragment is 2048
               RAM used:   26 (7%) at main() level
                           28 (8%) worst case
               Stack used: 1 locations (0 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   073
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  BTFSS  0B.5
0018:  GOTO   01B
0019:  BTFSC  0B.2
001A:  GOTO   02C
001B:  MOVF   22,W
001C:  MOVWF  04
001D:  MOVF   23,W
001E:  MOVWF  77
001F:  MOVF   24,W
0020:  MOVWF  78
0021:  MOVF   25,W
0022:  MOVWF  79
0023:  MOVF   26,W
0024:  MOVWF  7A
0025:  MOVF   20,W
0026:  MOVWF  0A
0027:  SWAPF  21,W
0028:  MOVWF  03
0029:  SWAPF  7F,F
002A:  SWAPF  7F,W
002B:  RETFIE
002C:  BCF    0A.3
002D:  BCF    0A.4
002E:  GOTO   02F
.................... #include <PF.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
*
0041:  CLRF   77
0042:  CLRF   78
0043:  MOVF   35,W
0044:  BCF    03.0
0045:  BTFSC  36.0
0046:  ADDWF  77,F
0047:  RRF    77,F
0048:  RRF    78,F
0049:  BTFSC  36.1
004A:  ADDWF  77,F
004B:  RRF    77,F
004C:  RRF    78,F
004D:  BTFSC  36.2
004E:  ADDWF  77,F
004F:  RRF    77,F
0050:  RRF    78,F
0051:  BTFSC  36.3
0052:  ADDWF  77,F
0053:  RRF    77,F
0054:  RRF    78,F
0055:  BTFSC  36.4
0056:  ADDWF  77,F
0057:  RRF    77,F
0058:  RRF    78,F
0059:  BTFSC  36.5
005A:  ADDWF  77,F
005B:  RRF    77,F
005C:  RRF    78,F
005D:  BTFSC  36.6
005E:  ADDWF  77,F
005F:  RRF    77,F
0060:  RRF    78,F
0061:  BTFSC  36.7
0062:  ADDWF  77,F
0063:  RRF    77,F
0064:  RRF    78,F
....................  
.................... #list 
....................  
.................... #device ADC=10 
....................  
.................... #FUSES PUT                      //Power Up Timer 
.................... #FUSES BROWNOUT                 //Reset when brownout detected 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOCPD                    //No EE protection 
.................... #FUSES NOWRT                    //Program memory not write protected 
.................... #FUSES NOPROTECT                //Code not protected from reading 
....................  
.................... #use delay(crystal=8MHz) 
.................... #use FIXED_IO( A_outputs=PIN_A5 ) 
.................... #use FIXED_IO( B_outputs=PIN_B7,PIN_B6,PIN_B5,PIN_B4,PIN_B3,PIN_B2,PIN_B1,PIN_B0 ) 
.................... #use FIXED_IO( C_outputs=PIN_C7,PIN_C6,PIN_C5,PIN_C4,PIN_C3,PIN_C2,PIN_C1,PIN_C0 ) 
.................... #use FIXED_IO( D_outputs=PIN_D7,PIN_D6,PIN_D5,PIN_D4,PIN_D3,PIN_D2,PIN_D1,PIN_D0 ) 
.................... #use FIXED_IO( E_outputs=PIN_E0 ) 
.................... #define B_SELECT   PIN_A0 
.................... #define B_MOVE    PIN_A1 
.................... #define B_RESET   PIN_A2 
.................... #define RED1    PIN_A5 
.................... #define RED2    PIN_B0 
.................... #define RED3    PIN_B1 
.................... #define GREEN1  PIN_B2 
.................... #define GREEN2  PIN_B3 
.................... #define GREEN3  PIN_B4 
.................... #define LIN1    PIN_B5 
.................... #define LIN2    PIN_B6 
.................... #define LIN3    PIN_B7 
.................... #define GND     PIN_E0 
.................... #define A1   PIN_C0 
.................... #define A2   PIN_C1 
.................... #define A3   PIN_C2 
.................... #define A4   PIN_C3 
.................... #define A5   PIN_C4 
.................... #define A6   PIN_C5 
.................... #define A7   PIN_C6 
.................... #define A8   PIN_C7 
.................... #define B1   PIN_D0 
.................... #define B2   PIN_D1 
.................... #define B3   PIN_D2 
.................... #define B4   PIN_D3 
.................... #define B5   PIN_D4 
.................... #define B6   PIN_D5 
.................... #define B7   PIN_D6 
.................... #define B8   PIN_D7 
....................  
....................  
.................... int8 i = 0, j = 0; 
.................... int8 pontuacaoJ1 = 0, pontuacaoJ2 = 0, ganhador = 0; 
.................... int8 tabuleiro[3][3]; 
....................  
.................... #INT_TIMER0 
.................... void  TIMER0_isr(VOID) { 
....................  
....................     
....................  
*
002F:  BCF    0B.2
0030:  BCF    0A.3
0031:  BCF    0A.4
0032:  GOTO   01B
.................... } 
....................  
.................... void reinicia_tabuleiro(){ 
....................  
....................    for(i = 0; i < 3; i++){ 
0033:  CLRF   27
0034:  MOVF   27,W
0035:  SUBLW  02
0036:  BTFSS  03.0
0037:  GOTO   070
....................     
....................       for(j = 0; j < 3; j++){ 
0038:  CLRF   28
0039:  MOVF   28,W
003A:  SUBLW  02
003B:  BTFSS  03.0
003C:  GOTO   06E
....................        
....................          tabuleiro[i][j] = -1; 
003D:  MOVF   27,W
003E:  MOVWF  35
003F:  MOVLW  03
0040:  MOVWF  36
*
0065:  MOVF   28,W
0066:  ADDWF  78,W
0067:  ADDLW  2C
0068:  MOVWF  04
0069:  BCF    03.7
006A:  MOVLW  FF
006B:  MOVWF  00
006C:  INCF   28,F
006D:  GOTO   039
....................        
....................       } 
006E:  INCF   27,F
006F:  GOTO   034
....................     
....................    } 
0070:  BCF    0A.3
0071:  BCF    0A.4
0072:  GOTO   08C (RETURN)
....................  
.................... } 
....................  
.................... int8 verifica_ganhador(int8 matriz[3][3]){ 
....................      
....................     int i = 0, j = 0; 
....................      
....................     for(i = 0; i < 3; i++){ 
....................          
....................         if(matriz[i][0] != -1 && matriz[i][0] == matriz[i][1] && matriz[i][0] == matriz[i][2]) 
....................             return matriz[i][0]; 
....................         if(matriz[0][i] != -1 && matriz[0][i] == matriz[1][i] && matriz[0][i] == matriz[2][i]) 
....................             return matriz[0][i]; 
....................          
....................     } 
....................      
....................     if(matriz[0][0] != -1 && matriz[0][0] == matriz[1][1] && matriz[0][0] == matriz[2][2]) 
....................         return matriz[0][0]; 
....................          
....................     else if(matriz[0][2] != -1 && matriz[0][2] == matriz[1][1] && matriz[0][2] == matriz[2][0]) 
....................         return matriz[0][2]; 
....................      
....................     else 
....................         return 0; 
....................      
.................... } 
....................  
.................... void main(){ 
0073:  MOVF   03,W
0074:  ANDLW  1F
0075:  MOVWF  03
0076:  CLRF   27
0077:  CLRF   28
0078:  CLRF   29
0079:  CLRF   2A
007A:  CLRF   2B
007B:  BSF    03.5
007C:  BSF    1F.0
007D:  BSF    1F.1
007E:  BSF    1F.2
007F:  BCF    1F.3
0080:  MOVLW  07
0081:  MOVWF  1C
0082:  BCF    03.7
....................    setup_timer_0 (RTCC_INTERNAL|RTCC_DIV_8|RTCC_8_BIT); //1, 0 ms overflow 
0083:  MOVF   01,W
0084:  ANDLW  C0
0085:  IORLW  02
0086:  MOVWF  01
....................    enable_interrupts (INT_TIMER0) ; 
0087:  BCF    03.5
0088:  BSF    0B.5
....................    enable_interrupts (GLOBAL) ; 
0089:  MOVLW  C0
008A:  IORWF  0B,F
....................     
....................    reinicia_tabuleiro(); 
008B:  GOTO   033
....................  
....................    WHILE(TRUE){ 
008C:  GOTO   08C
....................     
....................        
....................     
....................    } 
.................... } 
....................  
008D:  SLEEP

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
